#!/Library/ManagedFrameworks/Python/Python3.framework/Versions/Current/bin/python3

import json
import subprocess
import re


def get_mdm_enrollment_time():
    date = ""
    try:
        command = "/usr/bin/profiles -P -v | grep -A 10 'Management Profile'"
        profiles = subprocess.Popen(
            command,
            shell=True,
            stdout=subprocess.PIPE,
        )
        (profile_output, error) = profiles.communicate()
        profile_output = profile_output.decode().split("\n")

        for val in profile_output:
            if "installationDate" in val:
                # Regular expression pattern to match the date
                date_pattern = r"\d{4}-\d{2}-\d{2}"
                # Search for the date pattern in the input string
                date_match = re.search(date_pattern, val)
                if date_match is not None:
                    date = date_match.group(0)

    except Exception as e:
        print("Error: %s" % e)
        exit(1)

    return date


def get_mdm_status():
    mdm_details = {"ABM": "", "enrolled": "", "enrollmentDate": ""}
    try:
        command = ["/usr/bin/profiles", "status", "-type", "enrollment"]
        mdm_status = subprocess.Popen(
            command,
            shell=False,
            stdout=subprocess.PIPE,
        )
        (mdm_output, error) = mdm_status.communicate()
        mdm_status = mdm_output.decode().split("\n")
        abm = ""
        enrolled = ""

        for val in mdm_status:
            if "Enrolled via DEP" in val:
                abm = val.split(":")[1].strip()
                if abm == "Yes":
                    mdm_details["ABM"] = "Yes"
                else:
                    mdm_details["ABM"] = "No"
            if "MDM enrollment" in val:
                enrolled = val.split(":")[1].strip()
                if "Yes" in enrolled:
                    mdm_details["enrolled"] = enrolled
                else:
                    mdm_details["enrolled"] = "No"

        mdm_details["enrollmentDate"] = get_mdm_enrollment_time()
    except Exception as e:
        print("Error: %s" % e)
        exit(1)

    return mdm_details


def write_status(status):
    with open(
        "/Library/Application Support/SupportCompanion/mdm_status.json",
        "w",
    ) as f:
        f.write(json.dumps(status))


def main():
    mdm_status = get_mdm_status()
    write_status(mdm_status)


if __name__ == "__main__":
    main()
